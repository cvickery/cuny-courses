#! /usr/local/bin/bash

# Run the sequence of sql and python scripts to re-create and update the cuny_courses database.

# Summary of recommendations from:
#    http://petereisentraut.blogspot.com/2010/03/running-sql-scripts-with-psql.html
#
# PGOPTIONS='--client-min-messages=warning' psql -X -q -a -1 -v ON_ERROR_STOP=1 --pset pager=off \
#            -d mydb -f dump.sql
#
#   --client-min-messages=warning to suppress NOTICE messages
#   -X suppress reading .psqlrc (where I set timing)
#   -f rather than < to get line numbers when a command fails
#   -q to suppress CREATE TABLE, etc messages
#   Others pertain more to restoring dump files, where a single transaction would make sense, and
#   are not used here.

(
  export PGOPTIONS='--client-min-messages=warning'
  export EVENTS_TABLE=events-dump_`date +'%F_%H:%M'`.sql

  # CHECK COMMAND LINE
  # Dump and restore events table. But -n or --no-events suppresses that.
  # Do update only if there are new query files, but -f or --force-update overrides that.
  do_events=1
  force_update=0
  while [ $# -gt 0 ]
  do
    if [[ ( "$1" == "--no-events" ) || ( "$1" == "-n" ) ]]
    then do_events=0
    elif [[ ( "$1" == "--force-update" ) || ( "$1" == "-f" ) ]]
      then force_update=1
    else
      echo "usage: $0 [--no-events] [--force-update]"
      exit 1
    fi
    shift
  done

  echo BEGIN INITIALIZATION
  SECONDS=0

  # Try downloading new queries
  echo -n "DOWNLOAD new query files... " | tee init.log
  get_cuny
  if [[ $? -eq 1 && $force_update -eq 0 ]]
  then  echo "No new query files. Use --force-update to update anyway."
        exit 1
  fi

  # Python scripts process query results, so check that they are all present.
  # Report any mismatched dates and abort if not all a-ok

  echo -n "CHECK QUERY FILES... " | tee -a init.log
  ./check_query_dates.sh > init.log
  if [ $? -ne 0 ]
    then echo "ERROR: mismatched query dates."
         exit 1
  fi

  # Enter update_db mode and give time for running queries to complete
  echo "START update_db mode" | tee -a init.log
  psql access_control -c \
        "update access_control set start_time = now() where event_type = 'update_db'"
  sleep 10

  # Save events table unless suppressed by command line
  if [ $do_events -eq 1 ]
  then
    echo -n SAVE events table to $EVENTS_TABLE ... | tee init_psql.log
    pg_dump --data-only --table=events -f $EVENTS_TABLE cuny_courses | tee -a init_psql.log
    if [[ $? -ne 0 ]]
      then  echo -e '\nFAILED!'
            psql access_control -c \
            "update access_control set start_time = NULL where event_type = 'update_db'"
            exit
    fi
    echo done. | tee -a init_psql.log
  fi

  # Kill any existing connections to the db
  echo -n "RESTART postgres ..." | tee -a init_psql.log
  brew services restart postgresql | tee -a init_psql.log
  echo -n "wait for postgres restart to complete ..." | tee -a init_psql.log
  sleep 10
  echo done. | tee -a init_psql.log
  # Do the drop
  echo -n "DROP cuny_courses... " | tee -a init_psql.log
  dropdb cuny_courses >> init_psql.log | tee -a init_psql.log
  if [[ $? -ne 0 ]]
    then  echo -e '\nFAILED!'
          psql access_control -c \
          "update access_control set start_time = NULL where event_type = 'update_db'"
          exit
  fi
  echo -n "CREATE cuny_courses... " | tee -a init_psql.log
  createdb cuny_courses >> init_psql.log
  if [[ $? -ne 0 ]]
    then echo -e '\nFAILED!'
         exit
  fi
  echo done. | tee -a init_psql.log

  echo -n "CREATE FUNCTION numeric_part... " | tee -a init_psql.log
  psql -X -q -d cuny_courses -f numeric_part.sql >> init_psql.log
  echo done. | tee -a init_psql.log

  echo -n "SET UP query_only ROLE ..." | tee -a init_psql.log
  psql -X -q -d cuny_courses -f query_only_role.sql >> init_psql.log
  echo done. | tee -a init_psql.log

  echo -n "CREATE TABLE updates... " | tee -a init_psql.log
  psql -X -q -d cuny_courses -f updates.sql >> init_psql.log
  echo done. | tee -a init_psql.log

  # The following is the organizational structure of the University:
  #   Students are undergraduate or graduate (careers) at a college
  #   Colleges own divisions (groups/schools)
  #   Divisions own departments (organizations)
  #   Departments own disciplines (subjects)
  #   Disciplines map to CUNY subjects (external subject areas)
  #   Disciplines have courses
  #   Courses have a requirement designation
  #
  # The sequence of initializations, however, does not quite follow this
  # structure:
  #   Careers references institutions, so create institutions first
  #   Divisions references departments, so create departments first
  #
  echo -n "CREATE TABLE institutions... " | tee -a init_psql.log
  psql -X -q -d cuny_courses -f cuny_institutions.sql >> init_psql.log
  echo done. | tee -a init_psql.log

  # Now regenerate the tables that are based on query results
  #
  echo -n "CREATE TABLE cuny_careers... " | tee -a init.log
  python3 cuny_careers.py >> init.log
  if [ $? -ne 0 ]
    then echo -e '\nFAILED!'
         exit
  fi
  echo done. | tee -a init.log

  echo -n "CREATE TABLE cuny_departments... " | tee -a init.log
  python3 cuny_departments.py >> init.log
  if [ $? -ne 0 ]
    then echo  -e '\nFAILED!'
         exit
  fi
  echo done. | tee -a init.log

  echo -n "CREATE TABLE cuny_divisions... " | tee -a init.log
  python3 cuny_divisions.py --active_only >> init.log
  if [ $? -ne 0 ]
    then echo  -e '\nFAILED!'
         exit
  fi
  echo done. | tee -a init.log

  echo -n "CREATE TABLE cuny_subjects... " | tee -a init.log
  python3 cuny_subjects.py >> init.log
  if [ $? -ne 0 ]
    then echo  -e '\nFAILED!'
         exit
  fi
  echo done. | tee -a init.log

  echo -n "CREATE TABLE designations... " | tee -a init.log
  python3 designations.py >> init.log
  if [ $? -ne 0 ]
    then echo  -e '\nFAILED!'
         exit
  fi
  echo done. | tee -a init.log

  echo -n "CREATE TABLE crse_quiv_tbl... " | tee -a init.log
  python3 mk_crse_equiv_tbl.py >> init.log
  if [ $? -ne 0 ]
    then echo -e '\nFAILED!'
         exit
  fi
  echo done. | tee -a init.log

  echo -n "CREATE TABLE courses... " | tee -a init_psql.log
  psql -X -q -d cuny_courses -f create_courses.sql >> init_psql.log
  if [ $? -ne 0 ]
    then echo -e '\nFAILED!'
         exit
  fi
  echo done. | tee -a init_psql.log

  echo -n "POPULATE courses... " | tee -a init.log
  python3 populate_courses.py --progress >> init.log
  if [ $? -ne 0 ]
    then echo -e '\nFAILED!'
         exit
  fi
  echo done. | tee -a init.log

  echo -n "CHECK component contact hours... " | tee -a init.log
  python3 check_total_hours.py > check_contact_hours.log
  if [ $? -ne 0 ]
    then echo -e '\nFAILED!'
         exit
  fi
  echo done. | tee -a init.log

  # Transfer rules
  echo -n "CREATE TABLE review_status_bits... " | tee -a init_psql.log
  psql -X -q -d cuny_courses -f review_status_bits.sql >> init_psql.log
  if [ $? -ne 0 ]
    then echo -e '\nFAILED!'
         exit
  fi
  echo done. | tee -a init_psql.log

  echo -n "CREATE transfer_rules, source_courses, destination_courses... " | tee -a init_psql.log
  psql -X -q -d cuny_courses -f create_transfer_rules.sql >> init_psql.log
  psql -X -q -d cuny_courses -f view_transfer_rules.sql >> init_psql.log
  if [ $? -ne 0 ]
    then echo -e '\nFAILED!'
         exit
  fi
  echo done. | tee -a init_psql.log

  echo -n "POPULATE transfer_rules... " | tee -a init.log
  python3 populate_transfer_rules.py --progress --report >> init.log
  if [ $? -ne 0 ]
    then echo -e '\nFAILED!'
         exit
  fi
  echo done. | tee -a init.log

  echo -n "SPEEDUP transfer_rule lookups... " | tee -a init.log
  python3 mk_subject-rule_map.py --progress >> init.log
  if [ $? -ne 0 ]
    then echo -e '\nFAILED!'
         exit
  fi
  echo done. | tee -a init.log


  # The following takes too long, and doesn't really do more than
  # populate_transfer_rules.py already did. Historical Artifact.
  # echo -n "CHECK bogus rules... " | tee -a init.log
  # python3 bogus_rules.py --progress >> init.log
  # if [ $? -ne 0 ]
  #   then echo -e '\nFAILED!'
  #        exit
  # fi
  # echo done.

  # Managing the rule review process
  echo -n "CREATE TABLE sessions... " | tee -a init_psql.log
  psql -X -q -d cuny_courses -f sessions.sql >> init_psql.log
  if [ $? -ne 0 ]
    then echo -e '\nFAILED!'
         exit
  fi
  echo done. | tee -a init_psql.log

  #echo CREATE TABLE pending_reviews...
  #echo CREATE TABLE event_types...
  echo -n "CREATE TABLE events... " | tee -a init_psql.log
  psql -X -q -d cuny_courses -f reviews-events.sql >> init_psql.log
  if [ $? -ne 0 ]
    then echo -e '\nFAILED!'
         exit
  fi
  echo done. | tee -a init_psql.log

  if [ $do_events -eq 1 ]
  then
    echo -n "RESTORE previous events from $EVENTS_TABLE ... " | tee -a init_psql.log
    psql -X -q -d cuny_courses -f $EVENTS_TABLE >> init_psql.log
    if [ $? -ne 0 ]
      then echo -e '\nFAILED!'
           exit
    fi
    echo done. | tee -a init_psql.log

    echo -n "UPDATE review statuses... " | tee -a init.log
    python3 update_review_statuses.py >> init.log
    if [ $? -ne 0 ]
      then echo -e '\nFAILED!'
           exit
    fi
    echo done. | tee -a init.log
  fi

  # Exit update_db mode
  echo "END update_db mode" | tee -a init.log
  psql  access_control -c \
        "update access_control set start_time = NULL where event_type = 'update_db'"

  echo UPDATE COMPLETED in `date -d @"$SECONDS" +'%-Mm %-Ss'` | tee -a init.log

)
